{"version":3,"sources":["forms/validation/PaymentValidation.js","components/CreditCard/CreditCard.js","components/IconAmex/IconAmex.js","components/IconContactless/IconContactless.js","components/IconMastercard/IconMastercard.js","components/IconSecurityTag/IconSecurityTag.js","components/IconVisa/IconVisa.js","forms/PaymentForm/PaymentForm.js","containers/PaymentPage/PaymentPage.js","App.js","reportWebVitals.js","index.js"],"names":["isEmpty","onlyNumbers","paymentSchema","yup","cardNum","required","matches","min","max","cardName","cardExpMonth","cardExpYear","cardCvv","CreditCard","props","className","num","cardNumber","match","replace","expMonth","expYear","substr","name","cvv","IconAmex","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","IconContactless","IconMastercard","opacity","cx","cy","r","IconSecurityTag","IconVisa","PaymentForm","currentYear","Date","getFullYear","years","Array","from","length","_x","i","months","x","month","initialValues","validationSchema","onSubmit","data","setSubmitting","resetForm","console","log","alert","values","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","id","type","maxLength","value","onChange","onBlur","selected","disabled","hidden","map","year","PaymentPage","data-testid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8f10528.chunk.js","sourcesContent":["import * as yup from 'yup'\n\nlet isEmpty = \"Field can't be left empty.\"\nlet onlyNumbers = 'Field may only consist of numbers.'\n\nexport const paymentSchema = yup.object({\n  cardNum: yup\n    .string()\n    .required(isEmpty)\n    .matches(/[0-9]+/, onlyNumbers)\n    // todo: 15 length is for amex, 16 for everything else, this should probably be validated more specifically\n    .min(15, 'May not be shorter than 15 numbers.')\n    .max(16, 'May not be longer than 16 numbers.'),\n\n  cardName: yup\n    .string()\n    .required(isEmpty)\n    .matches(\n      /^[a-zA-ZåäöÅÄÖ_ ]*$/,\n      'May only consist of alphabetical characters.'\n    )\n    .min(2, 'May not be shorter than 2 characters.')\n    .max(26, 'May not be longer than 26 characters.'),\n\n  cardExpMonth: yup\n    .string()\n    .required()\n    .matches(/^[0-9]{2}$/),\n\n  cardExpYear: yup\n    .string()\n    .required()\n    .matches(/^[0-9]{4}$/),\n\n  cardCvv: yup\n    .string()\n    .required(isEmpty)\n    .matches(/^[0-9]{3}$/, onlyNumbers)\n    .min(3, 'May not be shorter than 3 numbers')\n    .max(3, 'May not be longer than 3 numbers'),\n})\n","import React from 'react'\nimport {\n  IconAmex,\n  IconContactless,\n  IconMastercard,\n  IconSecurityTag,\n  IconVisa,\n} from '../index'\n\nimport './CreditCard.css'\n\nconst renderCardType = cardNumber => {\n  if (cardNumber.match(/'^4'/) != null) return <IconVisa />\n  if (cardNumber.match(/^(34|37)/) != null) return <IconAmex />\n  if (cardNumber.match(/^5[1-5]/) != null) return <IconMastercard />\n\n  return <IconVisa /> // default type\n}\n\nconst CreditCard = props => {\n  return (\n    <div\n      className={\n        'credit-card grid grid-col-1 bg-blue-500 p-8 rounded-3xl shadow-md text-white font-mono font-semibold'\n      }\n    >\n      <header className={'content-center grid grid-cols-2'}>\n        <div className={'flex flex-row gap-x-6'}>\n          <IconSecurityTag />\n          <IconContactless />\n        </div>\n        <div className={'justify-self-end'}>\n          {props.num ? renderCardType(props.num) : <IconVisa />}\n        </div>\n      </header>\n\n      <main className={'self-center'}>\n        <p className={'text-3xl text-center'}>\n          {props.num\n            ? props.num.replace(/\\W/gi, '').replace(/(.{4})/g, '$1 ')\n            : '#### #### #### ####'}\n        </p>\n      </main>\n      <footer className={'self-end grid grid-cols-2'}>\n        <div>\n          <p>\n            {props.expMonth ? props.expMonth : 'MM'}/\n            {props.expYear ? props.expYear.substr(2, 2) : 'YY'}\n          </p>\n          <p>{props.name ? props.name : 'Firstname Lastname'}</p>\n        </div>\n        <p className={'self-end justify-self-end'}>\n          {/*\n            todo: if I had the time I would have made the card flip to show where the cvv code is supposed to be located\n          */}\n          cvv {props.cvv ? props.cvv : '###'}\n        </p>\n      </footer>\n    </div>\n  )\n}\n\nexport default CreditCard\n","import React from 'react'\n\nconst IconAmex = () => {\n  return (\n    <svg\n      width={'84'}\n      height={'21'}\n      viewBox={'0 0 84 21'}\n      fill={'none'}\n      xmlns={'http://www.w3.org/2000/svg'}\n    >\n      <path\n        fillRule={'evenodd'}\n        clipRule={'evenodd'}\n        d={\n          'M9.47733 0L0 20.973H11.3457L12.7522 17.6291H15.9673L17.3738 20.973H29.8622V18.4208L30.975 20.973H37.435L38.5478 18.3669V20.973H64.5203L67.6785 17.7159L70.6356 20.973L83.9757 21L74.4684 10.5451L83.9757 0H70.8425L67.7683 3.19694L64.9042 0H36.6495L34.2233 5.41332L31.7401 0H20.4181V2.46538L19.1586 0H9.47733ZM11.6727 2.97822H17.2031L23.4894 17.2001V2.97822H29.5478L34.4032 13.1753L38.8781 2.97822H44.9062V18.0277H41.2382L41.2083 6.23502L35.8607 18.0277H32.5796L27.2021 6.23502V18.0277H19.6563L18.2257 14.6538H10.497L9.06946 18.0248H5.02649L11.6727 2.97822ZM63.1766 2.97822H48.262V18.0189H62.9457L67.6785 13.0342L72.2402 18.0189H77.0088L70.0777 10.5421L77.0088 2.97822H72.4471L67.7383 7.90569L63.1766 2.97822ZM14.363 5.52449L11.8167 11.5348H16.9064L14.363 5.52449ZM51.9451 8.84148V6.09419V6.09156H61.2514L65.3121 10.4852L61.0715 14.9028H51.9451V11.9036H60.0817V8.84148H51.9451Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n    </svg>\n  )\n}\n\nexport default IconAmex\n","import React from 'react'\n\nconst IconContactless = () => {\n  return (\n    <svg\n      width={'27'}\n      height={'34'}\n      viewBox={'0 0 27 34'}\n      fill={'none'}\n      xmlns={'http://www.w3.org/2000/svg'}\n    >\n      <path\n        d={\n          'M19.6883 0.280478C20.5061 -0.244899 21.6026 -0.0147693 22.086 0.824867C24.8592 5.6419 26.3216 11.1049 26.3131 16.6736C26.3046 22.2423 24.8254 27.7009 22.0375 32.5095C21.5515 33.3477 20.4543 33.5745 19.6381 33.0466C18.8219 32.5188 18.5965 31.4363 19.0767 30.5949C21.4957 26.3561 22.7783 21.56 22.7858 16.6683C22.7932 11.7766 21.5254 6.97658 19.1193 2.73051C18.6417 1.88763 18.8705 0.805856 19.6883 0.280478Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n      <path\n        d={\n          'M13.3518 3.59036C14.192 3.01718 15.3475 3.22571 15.8613 4.09982C18.0986 7.90601 19.282 12.2453 19.2732 16.6742C19.2644 21.1032 18.0638 25.4378 15.8113 29.2352C15.294 30.1073 14.1377 30.3113 13.2999 29.7348C12.462 29.1584 12.2612 28.0201 12.7673 27.1415C14.5993 23.9606 15.5745 20.3521 15.5818 16.667C15.5891 12.9819 14.6283 9.3696 12.8089 6.18158C12.3064 5.30103 12.5117 4.16353 13.3518 3.59036Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n      <path\n        d={\n          'M6.88719 6.87541C7.75088 6.20927 9.00547 6.35968 9.57743 7.28522C11.3048 10.0804 12.2306 13.3061 12.2333 16.6108C12.236 19.9155 11.3154 23.1426 9.59261 25.9406C9.02216 26.867 7.76781 27.0195 6.90304 26.3547C6.03828 25.6899 5.89402 24.4603 6.43519 23.5167C7.63585 21.4232 8.27479 19.0455 8.27281 16.6139C8.27083 14.1824 7.62802 11.8058 6.42396 9.71417C5.88126 8.77143 6.02351 7.54156 6.88719 6.87541Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n      <path\n        d={\n          'M0.552499 10.0986C1.25521 9.37135 2.43361 9.34005 3.03836 10.1495C3.55192 10.8369 3.9832 11.5838 4.3219 12.3755C4.90088 13.7287 5.19732 15.1845 5.19328 16.6548C5.18925 18.1251 4.88483 19.5793 4.29843 20.9294C3.95539 21.7192 3.52002 22.4638 3.00269 23.1484C2.39351 23.9545 1.2153 23.9169 0.51659 23.1858C-0.182124 22.4548 -0.126718 21.3074 0.41144 20.4529C0.605961 20.144 0.777121 19.8202 0.923107 19.4841C1.3126 18.5874 1.51481 17.6215 1.51749 16.6449C1.52017 15.6683 1.32326 14.7013 0.938697 13.8024C0.794557 13.4655 0.625177 13.1408 0.432354 12.8309C-0.101108 11.9735 -0.150216 10.8259 0.552499 10.0986Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n    </svg>\n  )\n}\n\nexport default IconContactless\n","import React from 'react'\n\nconst IconMastercard = () => {\n  return (\n    <svg\n      width={'57'}\n      height={'34'}\n      viewBox={'0 0 57 34'}\n      fill={'none'}\n      xmlns={'http://www.w3.org/2000/svg'}\n    >\n      <circle\n        opacity={'0.8'}\n        cx={'17'}\n        cy={'17'}\n        r={'17'}\n        fill={'rgb(91, 105, 150)'}\n      />\n      <circle\n        opacity={'0.8'}\n        cx={'39.3125'}\n        cy={'17'}\n        r={'17'}\n        fill={'rgb(91, 105, 150)'}\n      />\n    </svg>\n  )\n}\n\nexport default IconMastercard\n","import React from 'react'\n\nconst IconSecurityTag = () => {\n  return (\n    <svg\n      width={'50'}\n      height={'34'}\n      viewBox={'0 0 50 34'}\n      fill={'none'}\n      xmlns={'http://www.w3.org/2000/svg'}\n    >\n      <path\n        fillRule={'evenodd'}\n        clipRule={'evenodd'}\n        d={\n          'M4.16667 0C1.86549 0 0 1.86548 0 4.16667V29.1667C0 31.4679 1.86549 33.3333 4.16667 33.3333H45.8333C48.1345 33.3333 50 31.4679 50 29.1667V4.16667C50 1.86548 48.1345 0 45.8333 0H4.16667ZM6.66667 3.33333C4.82572 3.33333 3.33333 4.82572 3.33333 6.66667V26.6667C3.33333 28.5076 4.82572 30 6.66667 30H16.6667H33.3333H43.3333C45.1743 30 46.6667 28.5076 46.6667 26.6667V6.66667C46.6667 4.82572 45.1743 3.33333 43.3333 3.33333H33.3333H16.6667H6.66667Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n      <path\n        d={\n          'M46.6667 15V9.16667H33.3333V3.33333H28.3333C29.2538 3.33333 30 4.07953 30 5V28.3333C30 29.2538 29.2538 30 28.3333 30H33.3333V24.1667H46.6667V18.3333C46.6667 19.7141 45.5474 20.8333 44.1667 20.8333H33.3333V12.5H44.1667C45.5474 12.5 46.6667 13.6193 46.6667 15Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n      <path\n        d={\n          'M3.33333 18.3333V24.1667H16.6667V30H21.6667C20.7462 30 20 29.2538 20 28.3333V5C20 4.07953 20.7462 3.33333 21.6667 3.33333H16.6667V9.16667H3.33333V15C3.33333 13.6193 4.45262 12.5 5.83333 12.5H16.6667V20.8333H5.83333C4.45262 20.8333 3.33333 19.7141 3.33333 18.3333Z'\n        }\n        fill={'rgb(91, 105, 150)'}\n      />\n    </svg>\n  )\n}\n\nexport default IconSecurityTag\n","import React from 'react'\n\nconst IconVisa = () => {\n  return (\n    <svg\n      width='79'\n      height='25'\n      viewBox='0 0 79 25'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path\n        fillRule='evenodd'\n        clipRule='evenodd'\n        d='M19.5842 24.8053H12.8049L7.72128 5.411C7.47999 4.51886 6.96766 3.73016 6.21405 3.35843C4.3333 2.42428 2.26085 1.68083 0 1.30587V0.559192H10.9209C12.4281 0.559192 13.5585 1.68083 13.7469 2.98348L16.3846 16.9732L23.1605 0.559192H29.7514L19.5842 24.8053ZM33.5195 24.8053H27.117L32.389 0.559192H38.7915L33.5195 24.8053ZM47.0747 7.27609C47.2631 5.97021 48.3935 5.22353 49.7123 5.22353C51.7848 5.03605 54.0423 5.41101 55.9264 6.34193L57.0568 1.12164C55.1728 0.374956 53.1003 0 51.2196 0C45.0055 0 40.4838 3.35844 40.4838 8.01954C40.4838 11.5655 43.6867 13.4273 45.9476 14.5489C48.3935 15.6674 49.3355 16.414 49.1471 17.5324C49.1471 19.21 47.2631 19.9567 45.3823 19.9567C43.1215 19.9567 40.8606 19.3975 38.7915 18.4634L37.6611 23.6869C39.9219 24.6178 42.3679 24.9928 44.6287 24.9928C51.5964 25.177 55.9264 21.8218 55.9264 16.7858C55.9264 10.4438 47.0747 10.0721 47.0747 7.27609ZM78.3333 24.8053L73.2497 0.559192H67.7893C66.6589 0.559192 65.5284 1.30587 65.1516 2.42428L55.738 24.8053H62.3289L63.6444 21.2626H71.7425L72.4961 24.8053H78.3333ZM68.7313 7.08862L70.6121 16.2266H65.34L68.7313 7.08862Z'\n        fill='rgb(91, 105, 150)'\n      />\n    </svg>\n  )\n}\n\nexport default IconVisa\n","import React from 'react'\nimport { Formik } from 'formik'\nimport { paymentSchema } from '../validation/PaymentValidation'\nimport { CreditCard } from '../../components'\n\nconst PaymentForm = () => {\n  const currentYear = new Date().getFullYear()\n  const years = Array.from({ length: 9 }, (_x, i) => currentYear + i)\n\n  const months = Array.from({ length: 12 }, (x, i) => {\n    const month = i + 1\n    return month <= 9 ? '0' + month : month\n  })\n\n  return (\n    <Formik\n      initialValues={{\n        cardNum: '',\n        cardName: '',\n        cardExpMonth: '',\n        cardExpYear: '',\n        cardCvv: '',\n      }}\n      validationSchema={paymentSchema}\n      onSubmit={(data, { setSubmitting, resetForm }) => {\n        setSubmitting(true)\n\n        // todo: use form data in backend\n        console.log(data)\n        alert(\n          \"Form submitted! 🥳\\n\\nps. This is here because I don't have time to make something more fancy.\"\n        )\n\n        resetForm()\n\n        setSubmitting(false)\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n      }) => (\n        <form\n          onSubmit={handleSubmit}\n          className={\n            'max-w-screen-sm flex justify-center flex-col gap-16 sm:bg-gray-50 sm:border sm:rounded-md sm:px-10 sm:py-12'\n          }\n        >\n          {/* Form data visualization */}\n          <div className={'flex items-center justify-center'}>\n            <CreditCard\n              num={values.cardNum}\n              name={values.cardName}\n              expMonth={values.cardExpMonth}\n              expYear={values.cardExpYear}\n              cvv={values.cardCvv}\n            />\n          </div>\n\n          {/* Form fields */}\n          <div className={'grid gap-4 sm:grid-cols-2'}>\n            {/* Card number input field */}\n            <fieldset className={'sm:col-span-2'}>\n              <label htmlFor={'cardNum'}>Card number</label>\n\n              <input\n                id={'cardNum'}\n                className={\n                  touched.cardNum && errors.cardNum ? 'errorBorder' : ''\n                }\n                type={'text'}\n                maxLength={'16'}\n                name={'cardNum'}\n                value={values.cardNum}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n\n              {touched.cardNum && errors.cardNum ? (\n                <small className={'mt-2 text-right text-pink-600 w-full block'}>\n                  {errors.cardNum}\n                </small>\n              ) : null}\n            </fieldset>\n\n            {/* Cardholder name input field */}\n            <fieldset className={'sm:col-span-2'}>\n              <label htmlFor={'cardName'}>Cardholder name</label>\n\n              <input\n                id={'cardName'}\n                className={\n                  touched.cardName && errors.cardName ? 'errorBorder' : ''\n                }\n                type={'text'}\n                name={'cardName'}\n                value={values.cardName}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n\n              {touched.cardName && errors.cardName ? (\n                <small className={'mt-2 text-right text-pink-600 w-full block'}>\n                  {errors.cardName}\n                </small>\n              ) : null}\n            </fieldset>\n\n            {/* Card expiration month and year dropdowns */}\n            <fieldset className={'sm:col-span-1 content-start'}>\n              <label htmlFor={'cardExpMonth'} className={'col-span-2'}>\n                Expiry date\n              </label>\n\n              <div className={'flex gap-x-3'}>\n                {/* Dropdown for card expiration month */}\n                <select\n                  className={\n                    touched.cardExpMonth && errors.cardExpMonth\n                      ? 'errorBorder'\n                      : ''\n                  }\n                  name={'cardExpMonth'}\n                  value={values.cardExpMonth}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                >\n                  {/* Doing this gives a warning,\n              but I don't know how else to default to 'Month' in 'select'. */}\n                  <option value={''} selected disabled hidden>\n                    Month\n                  </option>\n                  {months.map(month => (\n                    <option key={month} value={month}>\n                      {month}\n                    </option>\n                  ))}\n                </select>\n\n                {/* Dropdown for card expiration year */}\n                <select\n                  className={\n                    touched.cardExpYear && errors.cardExpYear\n                      ? 'errorBorder'\n                      : ''\n                  }\n                  name={'cardExpYear'}\n                  value={values.cardExpYear}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                >\n                  {/* Doing this gives a warning,\n              but I don't know how else to default to 'Year' in 'select'. */}\n                  <option value={''} selected disabled hidden>\n                    Year\n                  </option>\n                  {years.map(year => (\n                    <option key={year} value={year}>\n                      {year}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </fieldset>\n\n            {/* Card CVV input field */}\n            <fieldset className={'sm:col-span-1'}>\n              <label htmlFor={'cardCvv'}>Cvv</label>\n\n              <input\n                id={'cardCvv'}\n                className={\n                  touched.cardCvv && errors.cardCvv ? 'errorBorder' : ''\n                }\n                type={'text'}\n                name={'cardCvv'}\n                value={values.cardCvv}\n                onChange={handleChange}\n                onBlur={handleBlur}\n              />\n\n              {touched.cardCvv && errors.cardCvv ? (\n                <small\n                  className={\n                    'sm:col-span-3 mt-2 text-right text-pink-600 w-full block'\n                  }\n                >\n                  {errors.cardCvv}\n                </small>\n              ) : null}\n            </fieldset>\n\n            <button\n              disabled={isSubmitting}\n              type={'submit'}\n              className={'mt-6 btn-action-primary sm:col-span-2'}\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default PaymentForm\n","import React from 'react'\nimport { PaymentForm } from '../../forms'\n\nconst PaymentPage = () => {\n  return (\n    <div\n      data-testid={'payment-page'}\n      className={\n        'py-16 payment-page container flex justify-center items-center'\n      }\n    >\n      <PaymentForm />\n    </div>\n  )\n}\n\nexport default PaymentPage\n","import React from 'react'\nimport { PaymentPage } from './containers'\n\nfunction App() {\n  return (\n      <div data-testid={'app'} className={'container'}>\n        <PaymentPage />\n      </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}